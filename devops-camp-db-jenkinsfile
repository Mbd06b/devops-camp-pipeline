pipeline {
    agent {
        label 'jenkins-agent'
    }

    environment {
        PIPELINE_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        HARBOR_REGISTRY = 'harbor.dev.afsmtddso.com'
        HARBOR_PROJECT = 'mdowell-harbor-project/lab-env-repo'
        DB_IMAGE_NAME = 'db'
        JENKINS_HARBOR_CREDENTIAL_ID = 'mdowell-harbor-auth'
    }
    stages {
        stage('Application repository') {
            steps {
                echo "Cloning application repository"
                sh 'git clone https://github.com/Mbd06b/afs-labs-student.git'
                dir('afs-labs-student') {
                    script {
                        env.COMMIT_HASH = sh(script: 'git log --format=format:%h -1 --follow database/database.sql', returnStdout: true).trim()
                    }
                }
                withCredentials([usernamePassword(credentialsId: "$JENKINS_HARBOR_CREDENTIAL_ID", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    script {
                        env.BUILD_DB = sh(script: 'python check_harbor_db.py -h $COMMIT_HASH -i $DB_IMAGE_NAME -r $HARBOR_REGISTRY -p $HARBOR_PROJECT -c ${USERNAME}:${PASSWORD}', returnStdout: true).trim()
                    }
                }
            }
        }

        stage('DB changes: true') {
           when {
              environment name: 'BUILD_DB', value: 'true'
           }
           stages {
              stage('Database docker build') {
                  steps {
                      echo "Building database image"
                      //TODO: build docker image & push to Harbor
                    withCredentials([usernameColonPassword(credentialsId: "$JENKINS_HARBOR_CREDENTIAL_ID", variable: 'HARBOR-AUTH')]) {
                        script {
                            sh 'docker build -t $DB_IMAGE_NAME-$COMMIT_HASH -f ./$DB_IMAGE_NAME/Dockerfile ./afs-labs-student'
                            docker.withRegistry('https://$HARBOR_REGISTRY', "$JENKINS_HARBOR_CREDENTIAL_ID") {
                                sh 'docker tag $DB_IMAGE_NAME-$COMMIT_HASH $HARBOR_REGISTRY/$HARBOR_PROJECT/$DB_IMAGE_NAME:$COMMIT_HASH-$PIPELINE_HASH'
                                sh 'docker push $HARBOR_REGISTRY/$HARBOR_PROJECT/$DB_IMAGE_NAME:$COMMIT_HASH-$PIPELINE_HASH'
                            }
                        }
                    }   
                  }
                   //("Lab 4 - Artifact Management"): clean local docker db image
                  post {
                        always {
                            echo "Clean local $DB_IMAGE_NAME image"
                            script {
                                try {
                                    sh 'docker rmi $DB_IMAGE_NAME-$COMMIT_HASH:latest'
                                    sh 'docker rmi $HARBOR_REGISTRY/$HARBOR_PROJECT/$DB_IMAGE_NAME:$COMMIT_HASH-$PIPELINE_HASH'                            
                                } catch (err) {
                                    echo err.getMessage()
                                }
                            }
                        }
                    }
              }
              stage('Deploy') {
                  steps {
                      echo "Deployment stage"
                      //TODO: deploy database
                      sh 'kubectl -n mdowell set image deployment/db-deployment db-deployment=$HARBOR_REGISTRY/$HARBOR_PROJECT/$DB_IMAGE_NAME:$COMMIT_HASH-$PIPELINE_HASH'
                  }
              }
           }
        }
    }
    post {
        cleanup {
            echo "Clean workspace"
            sh 'rm -rf .git ./*'
        }
    }
}